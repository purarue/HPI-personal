#!/usr/bin/env python3

"""
Parses my SMS messages, lets me pick one or more conversations (incase multiple numbers are the same person)
and then displays the messages in a chat-like format, alternating colors for me/other person
"""

import shutil
from collections import defaultdict
from typing import Iterable, Literal

import click
import pyfzf
from rich.console import Console
from rich.panel import Panel
from rich.align import Align
from my.core import get_files
from more_itertools import last
from my.smscalls import Message, _extract_messages, config
from my.core.error import drop_exceptions


def group_by_convo(messages: Iterable[Message]) -> dict[str, list[Message]]:
    convos = defaultdict(list)
    for message in messages:
        convos[message.phone_number].append(message)
    return convos


console = Console()


console_width = shutil.get_terminal_size().columns


def display_message(message: Message, align: Literal["left", "right"] = "left") -> None:
    date_str = message.dt.astimezone().strftime("%Y-%m-%d %H:%M:%S")

    if align == "left":
        box = Panel.fit(
            message.message, title=date_str, border_style="blue", width=console_width
        )
        console.print(box)
    else:
        box = Panel.fit(
            Align(message.message, align="right", width=console_width),
            title=date_str,
            border_style="red",
            width=console_width,
        )
        console.print(box)


def latest_messages() -> list[Message]:
    files = list(get_files(config.export_path, glob="sms-*.xml"))
    files.sort(key=lambda f: f.stat().st_mtime)
    return sorted(drop_exceptions(_extract_messages(last(files))), key=lambda m: m.dt)


def pick_convo(convos: dict[str, list[Message]]) -> list[Message]:
    fzf = pyfzf.FzfPrompt(default_options="--multi --cycle --reverse")
    mem = {}  # prompt to message mapping
    for phone_number, msgs in convos.items():
        if not msgs:
            continue
        msg = msgs[-1]
        key = f"{phone_number} {msg.who} ({len(msgs)} messages)"
        mem[key] = msgs
    convo = fzf.prompt(mem)
    if not convo:
        click.secho("No convo selected", fg="red")
        return []

    use_messages = []
    for k in convo:
        use_messages.extend(mem[k])

    use_messages.sort(key=lambda m: m.dt)

    return use_messages


@click.command()
def main() -> None:
    convos = group_by_convo(latest_messages())
    for message in pick_convo(convos):
        if message.from_me:
            display_message(message)
        else:
            display_message(message, align="right")
        click.echo()


if __name__ == "__main__":
    main()
