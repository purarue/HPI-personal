#!/usr/bin/env python3

"""
Parses my SMS messages, lets me pick one or more conversations (in case multiple numbers are the same person)
and then displays the messages in a chat-like format, alternating colors for me/other person
"""

import shutil
from collections import defaultdict
from typing import Iterable, Literal, NamedTuple, Self
from datetime import datetime

import click
import pyfzf
from rich.console import Console
from rich.panel import Panel
from rich.align import Align
from my.core import get_files
from more_itertools import last
from my.smscalls import (
    Message as HPIMessage,
    MMS,
    _extract_mms,
    _extract_messages,
    config,
)
from my.core.error import drop_exceptions


def clean_number(s: str) -> str:
    # TODO: add more matches for other area codes?
    if s.startswith("+1"):
        s = s[2:]
    return s.replace("-", "").strip()


# just extract the useful info from this
class MsgData(NamedTuple):
    dt: datetime
    key: str
    phone_number: str
    who: str | None
    from_me: bool
    text: str

    @classmethod
    def from_hpi_msg(cls, msg: HPIMessage) -> Self:
        pn = clean_number(msg.phone_number)
        return cls(
            phone_number=pn,
            key=pn,
            dt=msg.dt,
            who=msg.who,
            from_me=msg.from_me,
            text=msg.message,
        )

    @classmethod
    def from_hpi_mms(cls, msg: MMS) -> Self:
        phone_number = msg.from_user
        assert isinstance(
            phone_number, str
        ), f"Unexpected type {phone_number} {type(phone_number)}"
        content = ""
        for p in msg.parts:
            if p.content_type == "text/plain" and p.text is not None:
                content += p.text + "\n"
        if not content:
            raise RuntimeError("No content in MMS")
        # ~ is separator if it has multiple numbers from a MMS convo
        is_multiple = "~" in msg.phone_number
        cnumber = clean_number(phone_number)
        return cls(
            text=content.strip(),
            key=msg.phone_number if is_multiple else cnumber,
            dt=msg.dt,
            who=msg.who,
            from_me=msg.from_me,
            phone_number=cnumber,
        )


def group_by_convo(messages: Iterable[HPIMessage | MMS]) -> dict[str, list[MsgData]]:
    convos = defaultdict(list)
    for message in messages:
        if isinstance(message, MMS):
            try:
                m = MsgData.from_hpi_mms(message)
            except RuntimeError as re:
                if str(re) == "No content in MMS":
                    continue
            else:
                convos[m.key].append(m)
        else:
            m = MsgData.from_hpi_msg(message)
            convos[m.key].append(m)
    return convos


console = Console()


console_width = shutil.get_terminal_size().columns


def display_message(message: MsgData, align: Literal["left", "right"] = "left") -> None:
    date_str = message.dt.astimezone().strftime("%Y-%m-%d %H:%M:%S")
    color = "blue" if align == "left" else "red"
    box = Panel.fit(
        Align(message.text, align=align, width=console_width),
        title=f"{message.phone_number} - {date_str}",
        border_style=color,
        width=console_width,
    )
    console.print(box)
    click.echo()


def latest_messages() -> list[HPIMessage | MMS]:
    files = list(get_files(config.export_path, glob="sms-*.xml"))
    files.sort(key=lambda f: f.stat().st_mtime)

    msgs = list(drop_exceptions(_extract_messages(last(files))))
    mmss = list(drop_exceptions(_extract_mms(last(files))))
    all_msgs: list[HPIMessage | MMS] = msgs + mmss
    all_msgs.sort(key=lambda m: m.dt)
    return all_msgs


def pick_convo(convos: dict[str, list[MsgData]]) -> list[MsgData]:
    fzf = pyfzf.FzfPrompt(default_options="--multi --cycle --reverse")
    mem = {}  # prompt to message mapping
    for phone_number, msgs in sorted(
        convos.items(), key=lambda x: x[1][-1].dt, reverse=True
    ):
        if not msgs:
            continue
        msg = msgs[-1]
        key = f"{phone_number} {msg.who} ({len(msgs)} messages)"
        mem[key] = msgs
    convo = fzf.prompt(mem)
    if not convo:
        click.secho("No convo selected", fg="red")
        return []

    use_messages = []
    for k in convo:
        use_messages.extend(mem[k])

    use_messages.sort(key=lambda m: m.dt)

    return use_messages


@click.command()
def main() -> None:
    convos = group_by_convo(latest_messages())
    for message in pick_convo(convos):
        display_message(message, align="left" if message.from_me else "right")


if __name__ == "__main__":
    main()
