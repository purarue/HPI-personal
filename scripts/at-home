#!/usr/bin/env python3

import sys
import click
from datetime import datetime, timedelta
from more_itertools import last
from my.location.gpslogger import inputs, _extract_locations
from my.config import location
from geopy.distance import distance as dist_km  # type: ignore


@click.command()
@click.option("-v", "--verbose", is_flag=True, help="print location info")
@click.option("-d", "--distance", default=0.1, type=float, help="distance in km")
def main(verbose: bool, distance: float):
    """
    Check if I'm at home
    """

    latest = last(sorted(inputs(), key=lambda loc: loc.stat().st_mtime))
    latest_loc = last(sorted(_extract_locations(latest), key=lambda loc: loc.dt))

    # if this location is more than 15 minutes old, we cant compute, exit with code 2
    if datetime.now().astimezone() - latest_loc.dt.astimezone() > timedelta(minutes=15):
        if verbose:
            click.echo("location too old, not computing", err=True)
        sys.exit(2)

    latest_home_info = last(location.home)
    assert isinstance(latest_home_info, tuple), latest_home_info
    assert len(latest_home_info) == 2, latest_home_info
    home_latlon = latest_home_info[1]
    assert isinstance(home_latlon, tuple), home_latlon
    assert len(home_latlon) == 2, home_latlon

    cur_latlon = (latest_loc.lat, latest_loc.lon)

    dist = dist_km(home_latlon, cur_latlon)

    if verbose:
        click.echo(f"home: {home_latlon}", err=True)
        click.echo(f"current: {cur_latlon}", err=True)
        click.echo(f"distance: {dist.km} km", err=True)

    if dist.km < distance:
        if verbose:
            click.echo("at home", err=True)
        sys.exit(0)
    else:
        if verbose:
            click.echo("not at home", err=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
