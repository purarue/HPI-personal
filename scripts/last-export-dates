#!/usr/bin/env python3

"""
For exports which I have to do manually --
i.e. go to some website, login, request and then
download, this reminds me to do it when my newest
local data is over 90 days old
"""

from time import time
from typing import Optional, Iterator
from datetime import datetime, timedelta

import click
import my.google.takeout.parser
import my.discord.data_export
from scramble_history.twistytimer import merge_files, Solve
from my.core.query import attribute_func
from my.core.query_range import select_range
from tabulate import tabulate
from seanb.notify import notify


def _twistytimer() -> Iterator[Solve]:
    from my.scramble.history import parsed_conf

    latest = sorted(parsed_conf["twistytimer"], key=lambda pth: pth.stat().st_mtime)[-1]
    yield from merge_files([latest])


day = timedelta(days=1).total_seconds()


@click.command(help=__doc__, context_settings={"max_content_width": 100})
@click.option(
    "-n",
    "--override-days",
    "_override",
    type=int,
    default=None,
    help="If over this many days, notify/warn",
)
def main(_override: Optional[int]) -> None:
    """
    Warn me to do exports I do manually, periodicaly
    """
    lines = []
    for name, func, days in (
        ("Google Takeout", my.google.takeout.parser.events, 90),
        ("Discord Data Export", my.discord.data_export.messages, 150),
        ("TwistyTimer", _twistytimer, 31),
    ):
        over_days = _override if _override is not None else days
        # function which when given an item returns the datetime
        attrfunc = attribute_func(
            next(filter(lambda o: o is not None, func())),
            where=lambda o: isinstance(o, datetime),
        )
        assert attrfunc is not None

        # sort function results by datetime, drop anything that cant be sorted
        itr = select_range(func(), order_by_value_type=datetime, drop_unsorted=True)
        # remove nones, attrfunc(o) will return the datetime
        # and then we can extract the largest
        maxval = max(filter(lambda o: attrfunc(o) is not None, itr), key=attrfunc)  # type: ignore
        # calculate diff with now
        mdt = attrfunc(maxval)
        assert isinstance(mdt, datetime)
        days_since = (time() - mdt.timestamp()) / day
        lines.append([name, round(days_since, 3)])
        if days_since > over_days:
            msg = f"{name} exported over {over_days} days ago"
            click.echo(msg)
            notify(
                msg,
                title="last-export-dates",
            )

    print(
        tabulate(
            lines,
            headers=(
                "Export",
                "Days Since",
            ),
        )
    )


if __name__ == "__main__":
    main()
